//view
create or replace view cust_views.vw_cust
as
select * from SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.CUSTOMER

select * from cust_views.vw_cust

//secure view
create or replace secure view cust_views.svw_cust
as
select * from SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.CUSTOMER



///Reader account
create managed account 


// streams

USE DATABASE mydb1;

CREATE SCHEMA IF NOT EXISTS MYSTREAMS1;

CREATE SCHEMA IF NOT EXISTS STAGE_TBLS1;

CREATE SCHEMA IF NOT EXISTS INTG_TBLS1;

CREATE TABLE STAGE_TBLS1.STG_EMPL1
( EMPID INT,
  EMPNAME VARCHAR(30),
  SALARY FLOAT,
  AGE INT,
  DEPT VARCHAR(10),
  LOCATION VARCHAR(20)
);
// integration table is the stream table where we insert or update our data

CREATE STREAM MYSTREAMS1.STREAM_EMPL1 ON TABLE STAGE_TBLS1.STG_EMPL1;
CREATE STREAM MYSTREAMS1.STREAM_EMPL1_2 ON TABLE STAGE_TBLS1.STG_EMPL1;
SHOW STREAMS IN SCHEMA MYSTREAMS1;
SELECT * FROM MYSTREAMS1.STREAM_EMPL1;

CREATE TABLE INTG_TBLS1.EMPL1
( EMPID INT,EMPNAME VARCHAR(30),SALARY FLOAT,AGE INT,DEPT VARCHAR(15),
  LOCATION VARCHAR(20),INSRT_DT DATE,LST_UPDT_DT DATE
);

//Inserts

INSERT INTO STAGE_TBLS1.STG_EMPL1 VALUES
(1, 'Amar', 80000, 35, 'SALES', 'Bangalore'),
(2, 'Bharath', 45000, 26, 'SALES', 'Hyderabad'),
(3, 'Charan', 76000, 34, 'TECHNOLOGY', 'Chennai'),
(4, 'Divya', 52000, 28, 'HR', 'Hyderabad'),
(5, 'Gopal', 24500, 22, 'TECHNOLOGY', 'Bangalore'),
(6, 'Haritha', 42000, 27, 'HR', 'Chennai') ;

SELECT * FROM STAGE_TBLS1.STG_EMPL1;

SELECT * FROM MYSTREAMS1.STREAM_EMPL1;

INSERT INTO INTG_TBLS1.EMPL1
( EMPID, EMPNAME, SALARY, AGE, DEPT, LOCATION, INSRT_DT, LST_UPDT_DT)
SELECT EMPID, EMPNAME, SALARY, AGE, DEPT, LOCATION, CURRENT_DATE, NULL
FROM  MYSTREAMS1.STREAM_EMPL1
WHERE METADATA$ACTION = 'INSERT'
AND METADATA$ISUPDATE = FALSE;

SELECT * FROM INTG_TBLS1.EMPL1;

SELECT * FROM MYSTREAMS1.STREAM_EMPL1;  
// stream will truncate the data when it is loaded to avoid duplicates. It truncates the data what ever is loaded.


DELETE FROM MYSTREAMS1.STREAM_EMPL1
WHERE empid NOT IN (
    SELECT MIN(empid)
    FROM MYSTREAMS1.STREAM_EMPL1
    GROUP BY empid, empname, ... -- List all columns based on which you define duplicates
);

//Updates

SELECT * FROM STAGE_TBLS1.STG_EMPL1;

UPDATE STAGE_TBLS1.STG_EMPL1 SET SALARY=49000 WHERE EMPID=2;
UPDATE STAGE_TBLS1.STG_EMPL1 SET LOCATION='Pune' WHERE EMPID=5;

SELECT * FROM STAGE_TBLS1.STG_EMPL1;

SELECT * FROM MYSTREAMS1.STREAM_EMPL1;

MERGE INTO INTG_TBLS1.EMPL1 E
USING MYSTREAMS1.STREAM_EMPL1 S
 ON E.EMPID = S.EMPID
WHEN MATCHED 
    AND S.METADATA$ACTION ='INSERT'
    AND S.METADATA$ISUPDATE ='TRUE'
THEN UPDATE 
    SET E.EMPNAME = S.EMPNAME,
  E.SALARY = S.SALARY,
  E.AGE = S.AGE,
  E.DEPT = S.DEPT,
  E.LOCATION = S.LOCATION,
  E.LST_UPDT_DT = CURRENT_DATE;  

SELECT * FROM INTG_TBLS1.EMPL1;

SELECT * FROM MYSTREAMS1.STREAM_EMPL1;

//Deletes

SELECT * FROM STAGE_TBLS1.STG_EMPL1;

DELETE FROM STAGE_TBLS1.STG_EMPL1 WHERE EMPID in (3,4);

SELECT * FROM STAGE_TBLS1.STG_EMPL1;

SELECT * FROM MYSTREAMS.STREAM_EMPL;

MERGE INTO INTG_TBLS.EMPL E
USING MYSTREAMS.STREAM_EMPL S
 ON E.EMPID = S.EMPID
WHEN MATCHED 
    AND S.METADATA$ACTION ='DELETE'
    AND S.METADATA$ISUPDATE ='FALSE'
THEN DELETE;

SELECT * FROM INTG_TBLS.EMPL;
SELECT * FROM MYSTREAMS.STREAM_EMPL;

//All changes at a time

SELECT * FROM STAGE_TBLS.STG_EMPL;

INSERT INTO STAGE_TBLS.STG_EMPL VALUES
(7, 'Janaki', 61000, 29, 'SALES', 'Pune'),
(8, 'Kamal', 92000, 33, 'TECHNOLOGY', 'Bangalore');

UPDATE STAGE_TBLS.STG_EMPL 
SET SALARY=85000, LOCATION='Hyderabad' WHERE EMPID=1;

DELETE FROM STAGE_TBLS.STG_EMPL WHERE EMPID in (6);

SELECT * FROM STAGE_TBLS.STG_EMPL;

SELECT * FROM MYSTREAMS.STREAM_EMPL;

MERGE INTO INTG_TBLS.EMPL T
USING MYSTREAMS.STREAM_EMPL S
 ON T.EMPID = S.EMPID
WHEN MATCHED
    AND S.METADATA$ACTION ='DELETE' 
    AND S.METADATA$ISUPDATE = 'FALSE'
    THEN DELETE                   
WHEN MATCHED
    AND S.METADATA$ACTION ='INSERT' 
    AND S.METADATA$ISUPDATE  = 'TRUE'       
    THEN UPDATE 
    SET T.EMPNAME = S.EMPNAME,
  T.SALARY = S.SALARY,
  T.AGE = S.AGE,
  T.DEPT = S.DEPT,
  T.LOCATION = S.LOCATION,
  T.LST_UPDT_DT = CURRENT_DATE
WHEN NOT MATCHED
    AND S.METADATA$ACTION ='INSERT'
 AND S.METADATA$ISUPDATE  = 'FALSE'
    THEN INSERT( EMPID, EMPNAME, SALARY, AGE, DEPT, LOCATION, INSRT_DT, LST_UPDT_DT)
 VALUES(S.EMPID, S.EMPNAME, S.SALARY, S.AGE, S.DEPT, S.LOCATION, CURRENT_DATE, NULL);
SELECT * FROM INTG_TBLS.EMPL;

SELECT * FROM MYSTREAMS.STREAM_EMPL;

//With Tasks
create or replace schema mydb1.MYTASKS1
CREATE OR REPLACE TASK mydb1.MYTASKS1.TASK_EMPL_DATA_LOAD1
    WAREHOUSE = compute_wh
    SCHEDULE = '1 MINUTES'
    WHEN SYSTEM$STREAM_HAS_DATA('MYSTREAMS.STREAM_EMPL')
AS 
MERGE INTO INTG_TBLS1.EMPL1 T
USING MYSTREAMS1.STREAM_EMPL1 S
 ON T.EMPID = S.EMPID
WHEN MATCHED
    AND S.METADATA$ACTION ='DELETE' 
    AND S.METADATA$ISUPDATE = 'FALSE'
    THEN DELETE                   
WHEN MATCHED
    AND S.METADATA$ACTION ='INSERT' 
    AND S.METADATA$ISUPDATE  = 'TRUE'       
    THEN UPDATE 
    SET T.EMPNAME = S.EMPNAME,
  T.SALARY = S.SALARY,
  T.AGE = S.AGE,
  T.DEPT = S.DEPT,
  T.LOCATION = S.LOCATION,
  T.LST_UPDT_DT = CURRENT_DATE
WHEN NOT MATCHED
    AND S.METADATA$ACTION ='INSERT'
 AND S.METADATA$ISUPDATE  = 'FALSE'
    THEN INSERT( EMPID, EMPNAME, SALARY, AGE, DEPT, LOCATION, INSRT_DT, LST_UPDT_DT)
 VALUES(S.EMPID, S.EMPNAME, S.SALARY, S.AGE, S.DEPT, S.LOCATION, CURRENT_DATE, NULL);

ALTER TASK MYTASKS1.TASK_EMPL_DATA_LOAD1 RESUME;
SELECT * FROM STAGE_TBLS1.STG_EMPL1;

INSERT INTO STAGE_TBLS1.STG_EMPL1 VALUES
(21, 'pragathi', 47000, 25, 'HR', 'Chennai');

UPDATE STAGE_TBLS1.STG_EMPL1
SET SALARY=67000 WHERE EMPID=2;

DELETE FROM STAGE_TBLS1.STG_EMPL1 WHERE EMPID in (5);

SELECT * FROM MYSTREAMS1.STREAM_EMPL1;

SELECT * FROM INTG_TBLS1.EMPL1;

SELECT * FROM MYSTREAMS1.STREAM_EMPL1;

show tasks
ALTER TASK MYTASKS1.TASK_EMPL_DATA_LOAD1 suspend;
ALTER TASK MYTASKS1.TASK_EMPL_DATA_LOAD1 set schedule='1 minute';




/// masking

Masking Policies 
=================
create or replace database mydb1
CREATE SCHEMA pragathi_policy ;

CREATE TABLE PUBLIC.ORDERS
AS SELECT * FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.ORDERS;

select * from public.orders

// creating the masking policy on total price

create or replace masking policy totalprice
as (val number) returns number->
case when current_role() in ('public') then val
else '0.00'
end  

alter table public.orders modify column o_totalprice
set masking policy totalprice;

 select * from public.orders 

 // dropping the policy. before we drop policy we need to unset it.
 
 alter table public.orders modify column o_totalprice
unset masking policy;

 select * from public.orders 
 
drop masking policy totalprice


show policy
